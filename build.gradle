/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'czoeller' at '09.03.16 21:22' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'

version = '0.1.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    mainClass = 'sample.Main'
}

task initSourceFolders { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}



buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'com.gluonhq:ignite-guice:1.0.1'

    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'log4j:log4j:1.2.17'


    compile 'com.github.vbauer:herald:1.2.3'

    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.13'

    // Merged start
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //compile 'commons-configuration:commons-configuration:1.6' //For configuration files: alternative to java.util.properties
    //compile 'com.itextpdf:itextpdf:5.0.6' //fuer iText: Alternative zu JLR
    //compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    compile 'org.xerial:sqlite-jdbc:3.8.11'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0' // for chainlistSorter in RecipelIstSorter
    // Merged end
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.6.2'
    compile 'commons-io:commons-io:2.4'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    compile 'org.jsoup:jsoup:1.8.3'
    compile 'com.googlecode.json-simple:json-simple:1.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'

    //Icons
    compile 'de.jensd:fontawesomefx-commons:8.11'
    compile 'de.jensd:fontawesomefx-controls:8.11'
    compile 'de.jensd:fontawesomefx-fontawesome:4.5.0'

    // Extra Controls
    compile 'org.controlsfx:controlsfx:8.40.10'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.4.0'

    compile 'org.hibernate:hibernate-core:5.2.1.Final'
    //del: compile 'org.hibernate:hibernate-entitymanager:5.2.1.Final'
    //compile 'org.hibernate:hibernate-core:4.3.10.Final'
    //compile group: 'net.kemitix', name: 'sqlite-dialect', version: '0.1.0'
    //compile 'com.googlecode.genericdao:dao-hibernate:1.2.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile 'com.google.inject.extensions:guice-persist:4.1.0'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compile 'uaihebert.com:EasyCriteria:3.0.0'
    compile 'com.h2database:h2:1.4.192'
    compile 'org.javalite:javalite-common:1.4.9'
}


idea {
    project {
        languageLevel = '1.8'
    }
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    manifest {
        attributes 'Implementation-Title': 'recipes2pdf', 'Implementation-Version': version
        attributes 'Main-Class': mainClass
    }
}
fatJar.dependsOn assemble

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport



