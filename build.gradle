/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'czoeller' at '09.03.16 21:22' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'org.javalite.activejdbc'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

// Declares binary plugin and its required JavaFX classpath
apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin"

version = '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

task initSourceFolders { // add << before { to prevent executing during configuration phase
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.javalite.io' }
    }
    dependencies {
        classpath group: 'org.javalite', name: 'activejdbc-gradle-plugin', version: '1.4.12-SNAPSHOT'
    }
}

// In this section you declare where to find the dependencies of your project
 repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url 'http://repo.javalite.io' }
 }


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.apache.pdfbox:pdfbox:1.5.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //compile 'commons-configuration:commons-configuration:1.6' //For configuration files: alternative to java.util.properties
    //compile 'com.itextpdf:itextpdf:5.0.6' //fuer iText: Alternative zu JLR
    compile group: 'org.javalite', name: 'activejdbc', version: '1.4.11'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.xerial:sqlite-jdbc:3.8.11'
    compile 'org.apache.commons:commons-lang3:3.4'

    // Jsoup
    compile 'org.jsoup:jsoup:1.8.3'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.+"

    //Icons
    compile 'de.jensd:fontawesomefx-commons:8.11'
    compile 'de.jensd:fontawesomefx-controls:8.11'
    compile 'de.jensd:fontawesomefx-fontawesome:4.5.0'

    // Extra Controls
    compile 'org.controlsfx:controlsfx:8.40.10'
}


idea {
    project {
        languageLevel = '1.8'
    }
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

javafx {
    // Main class of application
    mainClass 'sample.Main'

    // Application name and ID presented by target OS
    appID 'HelloWorldApp'
    appName 'Hello World Application'
    packaging 'none'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport



